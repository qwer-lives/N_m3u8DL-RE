name: Build Latest

on:
  workflow_dispatch:
    inputs:
      doRelease:
        description: 'Publish new release'
        type: boolean
        default: false
        required: false
      tag:
        type: string
        description: 'Release version tag (e.g. v1.2.3)'
        required: true
      ref:
        type: string
        description: 'Git ref from which to release'
        required: true
        default: 'main'

env:
  DOTNET_SDK_VERSION: "9.0.*"
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  build-win-nt6_0-x86:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - run: powershell -Command "(Get-Content src/N_m3u8DL-RE/N_m3u8DL-RE.csproj) -replace '<TargetFramework>.*</TargetFramework>', '<TargetFramework>net9.0-windows</TargetFramework>' | Set-Content src/N_m3u8DL-RE/N_m3u8DL-RE.csproj"
      - run: dotnet add src/N_m3u8DL-RE/N_m3u8DL-RE.csproj package YY-Thunks --version 1.1.4
      - run: dotnet add src/N_m3u8DL-RE/N_m3u8DL-RE.csproj package VC-LTL --version 5.1.1
      - run: dotnet publish src/N_m3u8DL-RE -p:TargetPlatformMinVersion=6.0 -r win-x86 -c Release -o artifact-x86

      - name: Upload Artifact[win-x86]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_win-NT6.0-x86
          path: artifact-x86\N_m3u8DL-RE.exe

  build-win-x64-arm64:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - run: dotnet publish src/N_m3u8DL-RE -r win-x64 -c Release -o artifact-x64
      - run: dotnet publish src/N_m3u8DL-RE -r win-arm64 -c Release -o artifact-arm64

      - name: Upload Artifact[win-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_win-x64
          path: artifact-x64\N_m3u8DL-RE.exe

      - name: Upload Artifact[win-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_win-arm64
          path: artifact-arm64\N_m3u8DL-RE.exe

  build-linux-x64-arm64:
    runs-on: ubuntu-latest

    steps:
      # https://learn.microsoft.com/zh-cn/dotnet/core/deploying/native-aot/cross-compile
      - run: |
          sudo dpkg --add-architecture arm64
          sudo bash -c 'cat > /etc/apt/sources.list.d/arm64.list <<EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-backports main restricted universe multiverse
          EOF'
          sudo sed -i -e 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          sudo sed -i -e 's/deb mirror/deb [arch=amd64] mirror/g' /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y curl wget libicu-dev libcurl4-openssl-dev zlib1g-dev libkrb5-dev clang llvm binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu zlib1g-dev:arm64
      
      - uses: actions/checkout@v1
      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      
      - run: dotnet publish src/N_m3u8DL-RE -r linux-x64 -c Release -o artifact
      - run: dotnet publish src/N_m3u8DL-RE -r linux-arm64 -c Release -o artifact-arm64

      - name: Upload Artifact[linux-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_linux-x64
          path: artifact/N_m3u8DL-RE

      - name: Upload Artifact[linux-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_linux-arm64
          path: artifact-arm64/N_m3u8DL-RE

  build-android-bionic-x64-arm64:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set up NDK
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://dl.google.com/android/repository/android-ndk-r27c-windows.zip" -OutFile "android-ndk.zip"
          Expand-Archive -Path "android-ndk.zip" -DestinationPath "./android-ndk"
          Get-ChildItem -Path "./android-ndk"
          $ndkRoot = "${{ github.workspace }}\android-ndk\android-ndk-r27c"
          echo "NDK_ROOT=$ndkRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          $ndkBinPath = "$ndkRoot\toolchains\llvm\prebuilt\windows-x86_64\bin"
          echo $ndkBinPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      
      - run: dotnet publish src/N_m3u8DL-RE -r linux-bionic-x64 -p:DisableUnsupportedError=true -p:PublishAotUsingRuntimePack=true -o artifact
      - run: dotnet publish src/N_m3u8DL-RE -r linux-bionic-arm64 -p:DisableUnsupportedError=true -p:PublishAotUsingRuntimePack=true -o artifact-arm64

      - name: Upload Artifact[linux-bionic-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_android-bionic-x64
          path: artifact/N_m3u8DL-RE

      - name: Upload Artifact[linux-bionic-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_android-bionic-arm64
          path: artifact-arm64/N_m3u8DL-RE

  build-linux-musl-x64:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet/sdk:9.0-alpine-amd64

    steps:
      - uses: actions/checkout@v1

      - run: apk add clang build-base zlib-dev
      - run: dotnet publish src/N_m3u8DL-RE -r linux-musl-x64 -c Release -o artifact -p:InvariantGlobalization=true

      - name: Upload Artifact[linux-musl-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_linux-musl-x64
          path: artifact/N_m3u8DL-RE

  build-linux-musl-arm64:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-22.04-cross-arm64-alpine

    steps:
      - uses: actions/checkout@v1

      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - run: apt-get update
      - run: apt-get install -y build-essential clang binutils-aarch64-linux-gnu
      - run: dotnet publish src/N_m3u8DL-RE -r linux-musl-arm64 -c Release -o artifact -p:CppCompilerAndLinker=clang -p:SysRoot=/crossrootfs/arm64 -p:InvariantGlobalization=true

      - name: Upload Artifact[linux-musl-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_linux-musl-arm64
          path: artifact/N_m3u8DL-RE

  build-mac-x64-arm64:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      - run: dotnet publish src/N_m3u8DL-RE -r osx-arm64 -c Release -o artifact-arm64 
      - run: dotnet publish src/N_m3u8DL-RE -r osx-x64 -c Release -o artifact-x64 

      - name: Upload Artifact[osx-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_osx-x64
          path: artifact-x64/N_m3u8DL-RE
      - name: Upload Artifact[osx-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_osx-arm64
          path: artifact-arm64/N_m3u8DL-RE

  create_draft_release:
    name: Create Github draft release
    if: ${{ github.event.inputs.doRelease == 'true' }}
    needs: [build-win-nt6_0-x86,build-win-x64-arm64,build-linux-x64-arm64,build-android-bionic-x64-arm64,build-linux-musl-x64,build-linux-musl-arm64,build-mac-x64-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Audit gh version
        run: gh --version

      - name: Check for existing release
        id: check_release
        run: |
          echo "::echo::on"
          gh release view --repo '${{ github.repository }}' '${{ github.event.inputs.tag }}' \
            && echo "already_exists=true" >> $GITHUB_ENV \
            || echo "already_exists=false" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repo
        if: env.already_exists == 'false'
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.inputs.ref }}'

      - name: Create release
        if: env.already_exists == 'false'
        run: >
          gh release create
          '${{ github.event.inputs.tag }}'
          --draft
          --repo '${{ github.repository }}'
          --title '${{ github.event.inputs.tag }}'
          --target '${{ github.event.inputs.ref }}'
          --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  attach_to_release:
    name: Attach native executables to release
    if: ${{ github.event.inputs.doRelease == 'true' }}
    needs: create_draft_release
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        
      - name: GH version
        run: gh --version
      
      - name: Fetch executables
        uses: actions/download-artifact@v3

      - name: Tar (linux, macOS)
        run: for dir in *{osx,linux}*; do tar cvzfp "${dir}_${{ env.date }}.tar.gz" "$dir"; done
        
      - name: Zip (windows)
        run: for dir in *win*; do zip -r "${dir}_${{ env.date }}.zip" "$dir"; done

      - name: Upload
        run: |
          until gh release upload --clobber --repo ${{ github.repository }} ${{ github.event.inputs.tag }} *.zip *.tar.gz; do
            echo "Attempt $((++attempts)) to upload release artifacts failed. Will retry in 20s"
            sleep 20
          done
        timeout-minutes: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
